// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var Verifier = artifacts.require('Verifier');
var proofZokrates = require('../../zokrates/code/square/proof.json');

contract('Verifier', accounts => {
	
	beforeEach(async function () {
		this.contract = await Verifier.new({from: accounts[0]});
	})
	
    // Test verification with correct proof
    // - use the contents from proof.json generated from zokrates steps
	it('givenCorrectProof_whenVerifiy_thenPassVerification', async function () {
		const result = await this.contract.verifyTx.call(proofZokrates.proof.a, proofZokrates.proof.b, proofZokrates.proof.c, proofZokrates.inputs);
		
		assert.equal(result, true);
	})
	// Test verification with incorrect proof
	it('givenWrongProof_whenVerifiy_thenVerificationFails', async function () {

		 // Inputs that can not be verified
        inputs = ["0x1000000000000000000000000000000000000000000000000000000000000007", "0x1000000000000000000000000000000000000000000000000000000000000002"]

		const result = await this.contract.verifyTx.call(proofZokrates.proof.a, proofZokrates.proof.b, proofZokrates.proof.c, inputs);
		
		assert.equal(result, false);
	})
	
})